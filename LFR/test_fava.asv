clc; clear; close all;

n = 3000;      
gamma = 3;
gamma_c = 3;
d = 12;
d_min = 7;
mu = 0.8;

tic
[B,~,c1,homeless,L1,dd1,dmax,S,N] = network_LFR(n,d,mu,gamma, gamma_c, d_min);
toc
fprintf('\n')

tic
[A, c, L, dd] = network_LFRR(n, d, mu, gamma, gamma_c, d_min,dd1,dmax,S,N);
toc
fprintf('\n')
%%
tic
[AA,err_agg,var_agg] = rewiring_new(A,c,mu,10000);
toc
fprintf('\n')

%{
tic
[AAA,err_agg1,var_agg1] = rewiring_new(A,c,mu,10000);
toc
fprintf('\n')


tic
[BB,err_agg1,var_agg1] = rewiring_new(B,c1,mu,10000);
toc
%}

%%

Q_LFR_rewired = community_louvain(AA);
Q_LFR = community_louvain(B);

NMI_LFR_rewired = nmi(c,Q_LFR_rewired);
NMI_LFR = nmi(c1,Q_LFR);

fprintf('Numero di comunità rilevate con LFR: %d\n', max(Q_LFR));
fprintf('Normalized Mutual Information: %4f\n',NMI_LFR)
fprintf('Numero di comunità rilevate con LFRR+rewiring: %d\n', max(Q_LFR_rewired));
fprintf('Normalized Mutual Information: %4f\n',NMI_LFR_rewired)



%%
M = (c == c');
M1 = (c1 == c1');

sameCommCounts1 = sum(A .* M, 2);
degrees1 = sum(A, 2);
fractions1 = sameCommCounts1 ./ degrees1;
fractions1(degrees1 == 0) = 0;
avgFraction1 = mean(fractions1);
subplot(3,1,1);
histogram(fractions1,25,"BinLimits",[0 1]);

sameCommCounts = sum(AA .* M, 2);
degrees = sum(AA, 2);
fractions = sameCommCounts ./ degrees;
fractions(degrees == 0) = 0;
avgFraction = mean(fractions);
subplot(3,1,2);
histogram(fractions,25,"BinLimits",[0 1]);

sameCommCounts2 = sum(B .* M1, 2);
degrees2 = sum(B, 2);
fractions2 = sameCommCounts2 ./ degrees2;
fractions2(degrees2 == 0) = 0;
avgFraction2 = mean(fractions2);
subplot(3,1,3);
histogram(fractions2,25,"BinLimits",[0 1]);

%%

subplot(2,1,1)
histogram(sum(A,2),'BinLimits',[0,50])
subplot(2,1,2)
histogram(sum(AA,2),'BinLimits',[0,50])

%%

plot(err_agg);
hold on;
grid on;
figure;
plot(var_agg);
grid on;

%%
%{

    mu_too_high = find(k_in_current == d);
    how_many = round(length(mu_too_high)./4);

    if ~improved && var>2

        idx = randperm(length(mu_too_high),how_many)';
        to_reshuffle = mu_too_high(idx);
        pairs = nchoosek(to_reshuffle,2);
        n_pairs = size(pairs,1);

        while n_pairs > 1

            idx = randi([1,n_pairs]);
            r = pairs(idx,1); p = pairs(idx,2); 
            
            if (comm(r) ~= comm(p))
                  neigh_r = find(A(r,:)); neigh_p = find(A(p,:));
                  to_pick_r = neigh_r(~any(A(neigh_r,neigh_p),2));
                  to_pick_p = neigh_p(~any(A(neigh_p,neigh_r),2));

                  if ~(isempty(to_pick_r) || isempty(to_pick_p))
                     A(r,p) = 1; A(p,r) = 1; 
                     s = to_pick_r(randi([1,length(to_pick_r)]));
                     t = to_pick_p(randi([1,length(to_pick_p)]));
                     A(s,t) = 1; A(t,s) = 1; 
                     A(r,s) = 0; A(p,t) = 0; A(s,r) = 0; A(t,p) = 0;
                     k_in_current(r) = k_in_current(r) - 1;
                     k_in_current(p) = k_in_current(p) - 1;
                     k_in_current(s) = k_in_current(s) - 1;
                     k_in_current(t) = k_in_current(t) - 1;
                     err(r) = 1; err(p) = 1;
                     err(s) = err(s) + 1; err(t) = err(t) + 1;
                     found3 = true;
                     random_change = random_change + 1;
                  end

            end

            n_pairs = n_pairs - 1;
            pairs(idx,:) = [];

        end

    %}      
